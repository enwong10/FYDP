{"ast":null,"code":"var _jsxFileName = \"B:\\\\dev\\\\school\\\\SYDE-461\\\\FYDP\\\\img-recog\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport './App.css';\nimport { test_fnc } from './test';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst api_key = '2b10189SmpQJ3XHmESgf2Hz9k';\n\nfunction App() {\n  _s();\n\n  var _selectedImage;\n\n  const inputFlower = useRef(null);\n  const inputLeaves = useRef(null);\n  const [selectedFlower, setSelectedFlower] = useState(null);\n  const [selectedLeaves, setSelectedLeaves] = useState(null);\n  const [response, setResponse] = useState();\n\n  const onUpload = () => {\n    // `current` points to the mounted file input element\n    if (inputFile.current) {\n      inputFile.current.click();\n    }\n  }; //   useEffect(() => {\n  //     // POST request using fetch inside useEffect React hook\n  //     const requestOptions = {\n  //         method: 'POST',\n  //         headers: { 'Content-Type': 'application/json' },\n  //         body: JSON.stringify({ title: 'React Hooks POST Request Example' })\n  //     };\n  //     fetch('https://reqres.in/api/posts', requestOptions)\n  //         .then(response => response.json())\n  //         .then(data => setPostId(data.id));\n  // \n  //   }, []);\n\n\n  const onIdentify = async () => {\n    test_fnc(selectedImage); //     (async () => {\n    //       // let form = new FormData();\n    // \n    //       // form.append('organs', 'flower');\n    //       // form.append('images', selectedImage ?? \"\");\n    // \n    //       // form.append('organs', 'leaf');\n    //       // form.append('images', fs.createReadStream(image_2));\n    //     // POST request using fetch inside useEffect React hook\n    //       const requestOptions = {\n    //         method: 'POST',\n    //         headers: { 'Content-Type': 'application/json' },\n    //         body: JSON.stringify({ organs: 'flower', images: selectedImage })\n    //       };\n    // \n    //       let status = false;\n    // \n    //       try {\n    //         fetch('https://my-api.plantnet.org/v2/identify/all?api-key=' + api_key, requestOptions)\n    //           .then(response => {\n    //             status = response.ok;\n    //             return response.json();\n    //           })\n    //           .then(data => setPostId(data.id));\n    //             \n    //         // const { status, data } = await axios.post(\n    //         //   'https://my-api.plantnet.org/v2/identify/all?api-key=YOUR-PRIVATE-API-KEY-HERE',\n    //         //   form, {\n    //         //   headers: form.getHeaders()\n    //         // }\n    //         // );\n    // \n    //         console.log('status', status); // should be: 200\n    //         // console.log('data', require('util').inspect(data, false, null, true)); // should be: read \"Step 6\" below\n    //       } catch (error) {\n    //         console.error('error', error);\n    //       }\n    //     })();\n    // POST request using fetch with async/await\n    // const requestOptions = {\n    //   method: 'POST',\n    //   headers: { 'Content-Type': 'multipart/form-data;boundary=\"boundary\"' },\n    //   body: JSON.stringify({ organs: 'flower', images: selectedImage })\n    // };\n    // const response = await fetch('https://my-api.plantnet.org/v2/identify/all?api-key=' + api_key, requestOptions);\n    // const data = await response.json();\n    // setResponse(data);\n  };\n\n  const handleChange = event => {\n    if (event && event.target) {\n      let input = event.target;\n      var fReader = new FileReader();\n\n      if (input.files) {\n        fReader.readAsDataURL(input.files[0]);\n\n        fReader.onloadend = event => {\n          if (event && event.target) {\n            setSelectedImage(event.target.result);\n          }\n        };\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"img\", {\n          src: (_selectedImage = selectedImage) !== null && _selectedImage !== void 0 ? _selectedImage : \"\",\n          className: \"App-logo\",\n          alt: \"logo\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"file\",\n            id: \"file\",\n            ref: inputFile,\n            onChange: handleChange,\n            style: {\n              display: 'none'\n            },\n            accept: \"image/*\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 111,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: onUpload,\n            children: \"Upload Image\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: onIdentify,\n            children: \"Identify\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"KDyB7d71P7cIHENl5lVf7S3HcZA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["B:/dev/school/SYDE-461/FYDP/img-recog/src/App.tsx"],"names":["React","useRef","useState","test_fnc","api_key","App","inputFlower","inputLeaves","selectedFlower","setSelectedFlower","selectedLeaves","setSelectedLeaves","response","setResponse","onUpload","inputFile","current","click","onIdentify","selectedImage","handleChange","event","target","input","fReader","FileReader","files","readAsDataURL","onloadend","setSelectedImage","result","display"],"mappings":"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","sourcesContent":["import React, { ChangeEvent, useEffect, useRef, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { test_fnc } from './test'\n\nconst api_key = '2b10189SmpQJ3XHmESgf2Hz9k'\n\nfunction App() {\n  const inputFlower = useRef<HTMLInputElement | null>(null);\n  const inputLeaves = useRef<HTMLInputElement | null>(null);\n  const [selectedFlower, setSelectedFlower] = useState<string | null>(null);\n  const [selectedLeaves, setSelectedLeaves] = useState<string | null>(null);\n  const [response, setResponse] = useState<string>();\n\n  const onUpload = () => {\n    // `current` points to the mounted file input element\n    if (inputFile.current) {\n      inputFile.current.click();\n    }\n  };\n\n//   useEffect(() => {\n//     // POST request using fetch inside useEffect React hook\n//     const requestOptions = {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify({ title: 'React Hooks POST Request Example' })\n//     };\n//     fetch('https://reqres.in/api/posts', requestOptions)\n//         .then(response => response.json())\n//         .then(data => setPostId(data.id));\n// \n//   }, []);\n\n  const onIdentify = async () => {\n    test_fnc(selectedImage);\n//     (async () => {\n//       // let form = new FormData();\n// \n//       // form.append('organs', 'flower');\n//       // form.append('images', selectedImage ?? \"\");\n// \n//       // form.append('organs', 'leaf');\n//       // form.append('images', fs.createReadStream(image_2));\n//     // POST request using fetch inside useEffect React hook\n//       const requestOptions = {\n//         method: 'POST',\n//         headers: { 'Content-Type': 'application/json' },\n//         body: JSON.stringify({ organs: 'flower', images: selectedImage })\n//       };\n// \n//       let status = false;\n// \n//       try {\n//         fetch('https://my-api.plantnet.org/v2/identify/all?api-key=' + api_key, requestOptions)\n//           .then(response => {\n//             status = response.ok;\n//             return response.json();\n//           })\n//           .then(data => setPostId(data.id));\n//             \n//         // const { status, data } = await axios.post(\n//         //   'https://my-api.plantnet.org/v2/identify/all?api-key=YOUR-PRIVATE-API-KEY-HERE',\n//         //   form, {\n//         //   headers: form.getHeaders()\n//         // }\n//         // );\n// \n//         console.log('status', status); // should be: 200\n//         // console.log('data', require('util').inspect(data, false, null, true)); // should be: read \"Step 6\" below\n//       } catch (error) {\n//         console.error('error', error);\n//       }\n//     })();\n\n\n    // POST request using fetch with async/await\n    // const requestOptions = {\n    //   method: 'POST',\n    //   headers: { 'Content-Type': 'multipart/form-data;boundary=\"boundary\"' },\n    //   body: JSON.stringify({ organs: 'flower', images: selectedImage })\n    // };\n    // const response = await fetch('https://my-api.plantnet.org/v2/identify/all?api-key=' + api_key, requestOptions);\n    // const data = await response.json();\n    // setResponse(data);\n  };\n\n  const handleChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (event && event.target) {\n      let input = event.target;\n      var fReader = new FileReader();\n      if (input.files) {\n        fReader.readAsDataURL(input.files[0]);\n        fReader.onloadend = (event) => {\n          if (event && event.target) {\n            setSelectedImage(event.target.result as string);\n          }\n        }\n      }\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>\n          <img src={selectedImage ?? \"\"} className=\"App-logo\" alt=\"logo\" />\n          <br/>\n          <div>\n            <input type='file' id='file' ref={inputFile} onChange={handleChange} style={{ display: 'none' }} accept=\"image/*\" />\n            <button onClick={onUpload}>Upload Image</button>\n            <button onClick={onIdentify}>Identify</button>\n          </div>\n        </div>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}