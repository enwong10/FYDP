{"ast":null,"code":"var _jsxFileName = \"B:\\\\dev\\\\school\\\\SYDE-461\\\\FYDP\\\\img-recog\\\\src\\\\App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst api_key = '2b10189SmpQJ3XHmESgf2Hz9k';\n\nfunction App() {\n  _s();\n\n  const inputFlower = useRef(null);\n  const inputLeaves = useRef(null);\n  const [selectedFlower, setSelectedFlower] = useState(null);\n  const [selectedLeaves, setSelectedLeaves] = useState(null);\n  const [response, setResponse] = useState();\n\n  const onUploadFlower = () => {\n    // `current` points to the mounted file input element\n    if (inputFlower.current) {\n      inputFlower.current.click();\n    }\n  };\n\n  const onUploadLeaves = () => {\n    // `current` points to the mounted file input element\n    if (inputLeaves.current) {\n      inputLeaves.current.click();\n    }\n  }; //   useEffect(() => {\n  //     // POST request using fetch inside useEffect React hook\n  //     const requestOptions = {\n  //         method: 'POST',\n  //         headers: { 'Content-Type': 'application/json' },\n  //         body: JSON.stringify({ title: 'React Hooks POST Request Example' })\n  //     };\n  //     fetch('https://reqres.in/api/posts', requestOptions)\n  //         .then(response => response.json())\n  //         .then(data => setPostId(data.id));\n  // \n  //   }, []);\n\n\n  const onIdentify = async () => {\n    // test_fnc(selectedImage);\n    //     (async () => {\n    //       // let form = new FormData();\n    // \n    //       // form.append('organs', 'flower');\n    //       // form.append('images', selectedImage ?? \"\");\n    // \n    //       // form.append('organs', 'leaf');\n    //       // form.append('images', fs.createReadStream(image_2));\n    //     // POST request using fetch inside useEffect React hook\n    //       const requestOptions = {\n    //         method: 'POST',\n    //         headers: { 'Content-Type': 'application/json' },\n    //         body: JSON.stringify({ organs: 'flower', images: selectedImage })\n    //       };\n    // \n    //       let status = false;\n    // \n    //       try {\n    //         fetch('https://my-api.plantnet.org/v2/identify/all?api-key=' + api_key, requestOptions)\n    //           .then(response => {\n    //             status = response.ok;\n    //             return response.json();\n    //           })\n    //           .then(data => setPostId(data.id));\n    //             \n    //         // const { status, data } = await axios.post(\n    //         //   'https://my-api.plantnet.org/v2/identify/all?api-key=YOUR-PRIVATE-API-KEY-HERE',\n    //         //   form, {\n    //         //   headers: form.getHeaders()\n    //         // }\n    //         // );\n    // \n    //         console.log('status', status); // should be: 200\n    //         // console.log('data', require('util').inspect(data, false, null, true)); // should be: read \"Step 6\" below\n    //       } catch (error) {\n    //         console.error('error', error);\n    //       }\n    //     })();\n    // POST request using fetch with async / await\n    const body = `{ \"organs\": \"flower\", \"images\": \"${selectedFlower}\", \"organs\": \"leaf\", \"images\": \"${selectedLeaves}\" }`;\n    const requestOptions = {\n      method: 'POST',\n      // mode: 'no-cors', // It can be no-cors, cors, same-origin\n      // credentials: 'same-origin', // It can be include, same-origin, omit\n      headers: {\n        // 'POST': '/v2/identify/all?api-key=2b10189SmpQJ3XHmESgf2Hz9k HTTP/1.1',\n        // 'Content-Length': `${body.length}`,\n        'Content-Type': 'multipart/form-data',\n        'Origin': 'undefined'\n      },\n      body\n    }; //'https://my-api.plantnet.org/v2/identify/all?api-key=' + api_key\n\n    const response = await fetch('http://localhost:8010/proxy/v2/identify/all?api-key=2b10189SmpQJ3XHmESgf2Hz9k', requestOptions);\n    const data = await response.json();\n    setResponse(data);\n  };\n\n  const handleFlowerChange = event => {\n    if (event && event.target) {\n      let input = event.target;\n      var fReader = new FileReader();\n\n      if (input.files) {\n        fReader.readAsDataURL(input.files[0]);\n\n        fReader.onloadend = event => {\n          if (event && event.target) {\n            setSelectedFlower(event.target.result);\n          }\n        };\n      }\n    }\n  };\n\n  const handleLeavesChange = event => {\n    if (event && event.target) {\n      let input = event.target;\n      var fReader = new FileReader();\n\n      if (input.files) {\n        fReader.readAsDataURL(input.files[0]);\n\n        fReader.onloadend = event => {\n          if (event && event.target) {\n            setSelectedLeaves(event.target.result);\n          }\n        };\n      }\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"header\", {\n      className: \"App-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: selectedFlower !== null && selectedFlower !== void 0 ? selectedFlower : \"\",\n            className: \"App-logo\",\n            alt: \"logo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 140,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 141,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              id: \"file\",\n              ref: inputFlower,\n              onChange: handleFlowerChange,\n              style: {\n                display: 'none'\n              },\n              accept: \"image/*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 143,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: onUploadFlower,\n              children: \"Upload Flower Image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 144,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 142,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 139,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"img\", {\n            src: selectedLeaves !== null && selectedLeaves !== void 0 ? selectedLeaves : \"\",\n            className: \"App-logo\",\n            alt: \"logo\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 148,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 149,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"file\",\n              id: \"file\",\n              ref: inputLeaves,\n              onChange: handleLeavesChange,\n              style: {\n                display: 'none'\n              },\n              accept: \"image/*\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 151,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: onUploadLeaves,\n              children: \"Upload Leaves Image\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 152,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 150,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 147,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 138,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onIdentify,\n        children: \"Identify\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 156,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"KDyB7d71P7cIHENl5lVf7S3HcZA=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["B:/dev/school/SYDE-461/FYDP/img-recog/src/App.tsx"],"names":["React","useRef","useState","api_key","App","inputFlower","inputLeaves","selectedFlower","setSelectedFlower","selectedLeaves","setSelectedLeaves","response","setResponse","onUploadFlower","current","click","onUploadLeaves","onIdentify","body","requestOptions","method","headers","fetch","data","json","handleFlowerChange","event","target","input","fReader","FileReader","files","readAsDataURL","onloadend","result","handleLeavesChange","display"],"mappings":"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","sourcesContent":["import React, { ChangeEvent, useEffect, useRef, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { test_fnc } from './test'\n\nconst api_key = '2b10189SmpQJ3XHmESgf2Hz9k'\n\nfunction App() {\n  const inputFlower = useRef<HTMLInputElement | null>(null);\n  const inputLeaves = useRef<HTMLInputElement | null>(null);\n  const [selectedFlower, setSelectedFlower] = useState<string | null>(null);\n  const [selectedLeaves, setSelectedLeaves] = useState<string | null>(null);\n  const [response, setResponse] = useState<string>();\n\n  const onUploadFlower = () => {\n    // `current` points to the mounted file input element\n    if (inputFlower.current) {\n      inputFlower.current.click();\n    }\n  };\n\n  const onUploadLeaves = () => {\n    // `current` points to the mounted file input element\n    if (inputLeaves.current) {\n      inputLeaves.current.click();\n    }\n  };\n\n  //   useEffect(() => {\n  //     // POST request using fetch inside useEffect React hook\n  //     const requestOptions = {\n  //         method: 'POST',\n  //         headers: { 'Content-Type': 'application/json' },\n  //         body: JSON.stringify({ title: 'React Hooks POST Request Example' })\n  //     };\n  //     fetch('https://reqres.in/api/posts', requestOptions)\n  //         .then(response => response.json())\n  //         .then(data => setPostId(data.id));\n  // \n  //   }, []);\n\n  const onIdentify = async () => {\n    // test_fnc(selectedImage);\n    //     (async () => {\n    //       // let form = new FormData();\n    // \n    //       // form.append('organs', 'flower');\n    //       // form.append('images', selectedImage ?? \"\");\n    // \n    //       // form.append('organs', 'leaf');\n    //       // form.append('images', fs.createReadStream(image_2));\n    //     // POST request using fetch inside useEffect React hook\n    //       const requestOptions = {\n    //         method: 'POST',\n    //         headers: { 'Content-Type': 'application/json' },\n    //         body: JSON.stringify({ organs: 'flower', images: selectedImage })\n    //       };\n    // \n    //       let status = false;\n    // \n    //       try {\n    //         fetch('https://my-api.plantnet.org/v2/identify/all?api-key=' + api_key, requestOptions)\n    //           .then(response => {\n    //             status = response.ok;\n    //             return response.json();\n    //           })\n    //           .then(data => setPostId(data.id));\n    //             \n    //         // const { status, data } = await axios.post(\n    //         //   'https://my-api.plantnet.org/v2/identify/all?api-key=YOUR-PRIVATE-API-KEY-HERE',\n    //         //   form, {\n    //         //   headers: form.getHeaders()\n    //         // }\n    //         // );\n    // \n    //         console.log('status', status); // should be: 200\n    //         // console.log('data', require('util').inspect(data, false, null, true)); // should be: read \"Step 6\" below\n    //       } catch (error) {\n    //         console.error('error', error);\n    //       }\n    //     })();\n\n    // POST request using fetch with async / await\n    const body = `{ \"organs\": \"flower\", \"images\": \"${selectedFlower}\", \"organs\": \"leaf\", \"images\": \"${selectedLeaves}\" }`\n    const requestOptions = {\n      method: 'POST',\n      // mode: 'no-cors', // It can be no-cors, cors, same-origin\n      // credentials: 'same-origin', // It can be include, same-origin, omit\n      headers: { \n        // 'POST': '/v2/identify/all?api-key=2b10189SmpQJ3XHmESgf2Hz9k HTTP/1.1',\n        // 'Content-Length': `${body.length}`,\n        'Content-Type': 'multipart/form-data',\n        'Origin': 'undefined',\n\n      },\n      body\n    };\n    //'https://my-api.plantnet.org/v2/identify/all?api-key=' + api_key\n    const response = await fetch('http://localhost:8010/proxy/v2/identify/all?api-key=2b10189SmpQJ3XHmESgf2Hz9k', requestOptions);\n    const data = await response.json();\n    setResponse(data);\n  };\n\n  const handleFlowerChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (event && event.target) {\n      let input = event.target;\n      var fReader = new FileReader();\n      if (input.files) {\n        fReader.readAsDataURL(input.files[0]);\n        fReader.onloadend = (event) => {\n          if (event && event.target) {\n            setSelectedFlower(event.target.result as string);\n          }\n        }\n      }\n    }\n  }\n\n  const handleLeavesChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (event && event.target) {\n      let input = event.target;\n      var fReader = new FileReader();\n      if (input.files) {\n        fReader.readAsDataURL(input.files[0]);\n        fReader.onloadend = (event) => {\n          if (event && event.target) {\n            setSelectedLeaves(event.target.result as string);\n          }\n        }\n      }\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>\n          <div>\n            <img src={selectedFlower ?? \"\"} className=\"App-logo\" alt=\"logo\" />\n            <br />\n            <div>\n              <input type='file' id='file' ref={inputFlower} onChange={handleFlowerChange} style={{ display: 'none' }} accept=\"image/*\" />\n              <button onClick={onUploadFlower}>Upload Flower Image</button>\n            </div>\n          </div>\n          <div>\n            <img src={selectedLeaves ?? \"\"} className=\"App-logo\" alt=\"logo\" />\n            <br />\n            <div>\n              <input type='file' id='file' ref={inputLeaves} onChange={handleLeavesChange} style={{ display: 'none' }} accept=\"image/*\" />\n              <button onClick={onUploadLeaves}>Upload Leaves Image</button>\n            </div>\n          </div>\n        </div>\n        <button onClick={onIdentify}>Identify</button>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}